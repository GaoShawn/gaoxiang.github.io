<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing on Xiang</title>
    <link>https://gaoxiang9430.github.io/tags/fuzzing/</link>
    <description>Recent content in Fuzzing on Xiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Mar 2017 21:45:10 +0800</lastBuildDate>
    
	<atom:link href="https://gaoxiang9430.github.io/tags/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Model-based Whitebox Fuzzing</title>
      <link>https://gaoxiang9430.github.io/post/model-based-whitebox-fuzzing/</link>
      <pubDate>Fri, 03 Mar 2017 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/model-based-whitebox-fuzzing/</guid>
      <description>Many real-world programs take highly structured and complex files as inputs. The automated testing of those programs is non-trivial. Traditional writebox test based on fuzzing or symbolic excution may produce inputs which do not satisfy file format. And blackbox test based on fuzzing can not reach the crash location quickly. Model-based Whitebox Fuzzing(MoWF) combine model-based blackbox fuzzing and the writebox fuzzing that generates valid files efficiently that exercise critical target lications effectively.</description>
    </item>
    
    <item>
      <title>Android Fuzzing</title>
      <link>https://gaoxiang9430.github.io/post/fuzzing/</link>
      <pubDate>Thu, 22 Dec 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/fuzzing/</guid>
      <description>Fuzz tesing is a method for testing software input validation by feeding it intentionally malformed input. Due to its simpleness and automated nature, fuzz attracted many researches to develop a fuzzer. Meanwhile,fuzz testing is not without drawbacks, the performance is the biggest problem. In order to fuzz a target application, the follow 4 steps should be accomplished:
1. Identifing the target2. Generating input3. Test-case delivery4. Crash monitoring  Identifying Target Identifying a target is the first step to craft an effective fuzzer.</description>
    </item>
    
    <item>
      <title>Coverage-based Fuzzing as Markov Chain</title>
      <link>https://gaoxiang9430.github.io/post/converage-based-greybox-fuzzing/</link>
      <pubDate>Mon, 08 Aug 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/converage-based-greybox-fuzzing/</guid>
      <description>This paper introduced Markov Chain into greybox Fuzzing to explore the state space of programs more systematically. The chain specifies the probability that fuzzing an input that exercises path i generates an input that exercise path j. Then, they assign each fuzzed test input an energy that controls the amount of fuzz generated at each iteration. And they find that greybox fuzzing is most efficient if the exploration focuses on the low-density region.</description>
    </item>
    
  </channel>
</rss>