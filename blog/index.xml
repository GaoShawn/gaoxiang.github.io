<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiang</title>
    <link>https://gaoxiang9430.github.io/</link>
    <description>Recent content on Xiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2020 16:31:18 +0800</lastBuildDate>
    
	<atom:link href="https://gaoxiang9430.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Forwarding: Four Big Bets For Better AI Research -- Sumit Gulwani</title>
      <link>https://gaoxiang9430.github.io/post/sumit/</link>
      <pubDate>Fri, 19 Jun 2020 16:31:18 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/sumit/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a big shift to change from being motivated by getting published in prestigious conferences and journals, to being motivated by solving real problems for real people.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Forwarding: Planning a (CS) Research Project for PhD studies</title>
      <link>https://gaoxiang9430.github.io/post/planning-a-cs-research-project-for-phd-studies/</link>
      <pubDate>Sun, 29 Apr 2018 22:05:18 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/planning-a-cs-research-project-for-phd-studies/</guid>
      <description>&lt;p&gt;Planning a (CS) Research Project for PhD studies by Prof. Abhik Roychoudhury, National University of
Singapore, March 2018&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Catches</title>
      <link>https://gaoxiang9430.github.io/catch/</link>
      <pubDate>Sun, 04 Jun 2017 12:21:17 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/catch/</guid>
      <description>你没有如期归来，或许这真实离别的意义。 From: 城南往事
 郎心自有一双脚，隔江隔海会归来。 From: 一代宗师
 翩翩程蝶着锦衣，唱啭漫天梨花雨。小楼凭栏断幽梦，虞姬刎颈祭别离。 From: 霸王别姬
 我之所以写作，不是因为我有才华，而是因为我有感情 From: 巴金
 往事依稀魂似梦，都随风雨入心头 From: 巴金
 人能弘道，道亦能弘人/千帆皆过影，良知乃吾师 From: 李嘉诚
 性格的基础是意志力，自我坚持和创意潜力的相形相塑 From: 李嘉诚
 命运大赢家的梦幻DNA组合是科学心智和艺术心灵的组合 From: 李嘉诚
 身与物化，意到图成 From: 李嘉诚
 爱在左，情在右; 在生命的两旁随时播种，随时开花。使得穿花拂叶的行人，踏着荆棘，不觉苦痛，有泪可挥，不觉悲凉。 From: 李嘉诚
 行过柳暗，也看过花明璀璨。一叶轻舟浮碧水，轻舟已过万重山。 / 一路走，一路戎马征关。 From: anonymous
 青年的动人之处，就在于勇气，和他们的远大前程。 From: 王小波《沉默的大多数》
 如果有一天，你找不到我了，千万不要难过，不是我不爱你了，也不是你错过我了。 而是终于我有勇气选择离开了。但请你记得，在这之前，我真的傻傻的等过你，好喜欢你。 From: anonymous
 网络世界极不平衡，网络劫匪和普通人分站在信息安全天秤的两端，一方手持兵刃，藏匿于暗处；一方手无寸铁，暴露在明处。弱势一方任人宰割，胜负毫无悬念。 From: 乌云-方小顿
 真正的绝望是屏蔽了一切人间烟火 From: 海边的曼彻斯特影评
 每个人或多或少都曾经挣扎于痛苦的泥潭之中，他们有的深陷，有的逃离，但一样的是，都带着一身泥泞，继续前行。 From: 海边的曼彻斯特影评
 你是春日里乘风逆光的柳絮，我是灵台边静默无言的菩提，我们以各自的姿态野蛮又安好的生长，即使从不算孤芳，却也渴盼众赏。某一天我遇到你，或你遇到我，我们倾听彼此的心声，也珍重彼此的过往，从此漂泊已久的灵魂，因为有你，得以安放。 From: 山大微信</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gaoxiang9430.github.io/about/</link>
      <pubDate>Fri, 02 Jun 2017 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/about/</guid>
      <description>高祥（Gao Xiang）  I am a Ph.D candidate in School of Computing at National University of Singapore. Before that, I obtained my B.S. degree in Computer Science in Shandong University.Intro  到达现在你所在的地方，离开现在你不在的地方，你必须经历一条其中并无引人入胜之处的道路。为了最终理解你所不理解的，你必须经历一条愚昧无知的道路。为了占有你从未占有的东西，你必须经历被剥夺的道路。兴趣领域　## 计算机、操作系统、软件安全、软件工程文学、书法、NBA</description>
    </item>
    
    <item>
      <title>读博这一年</title>
      <link>https://gaoxiang9430.github.io/post/%E8%AF%BB%E5%8D%9A%E8%BF%99%E4%B8%80%E5%B9%B4/</link>
      <pubDate>Fri, 28 Apr 2017 22:05:18 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/%E8%AF%BB%E5%8D%9A%E8%BF%99%E4%B8%80%E5%B9%B4/</guid>
      <description>&lt;p&gt;独自坐在樟宜机场一个小小的角落里，一如刚来的时候，无助、迷茫。看着川流不息人群的脚步匆匆，茫茫人海，自己是如此的渺小。&lt;/p&gt;
&lt;p&gt;不觉得身在异国他乡已有10个月之久，这10个月没有雪，也没有冬。静静的从一个夏天走到了另一个夏天。论起这些日子的收获，英语水平有了一点点的提高，写作水平有了一点点的进步。其它的，就只有对科研的难度的认知了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Model-based Whitebox Fuzzing</title>
      <link>https://gaoxiang9430.github.io/post/model-based-whitebox-fuzzing/</link>
      <pubDate>Fri, 03 Mar 2017 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/model-based-whitebox-fuzzing/</guid>
      <description>Many real-world programs take highly structured and complex files as inputs. The automated testing of those programs is non-trivial. Traditional writebox test based on fuzzing or symbolic excution may produce inputs which do not satisfy file format. And blackbox test based on fuzzing can not reach the crash location quickly. Model-based Whitebox Fuzzing(MoWF) combine model-based blackbox fuzzing and the writebox fuzzing that generates valid files efficiently that exercise critical target lications effectively.</description>
    </item>
    
    <item>
      <title>匆匆又是一年，转眼竟是夏天</title>
      <link>https://gaoxiang9430.github.io/post/life/%E6%89%80%E8%B0%93%E8%BF%87%E5%B9%B4/</link>
      <pubDate>Sat, 28 Jan 2017 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E6%89%80%E8%B0%93%E8%BF%87%E5%B9%B4/</guid>
      <description>&lt;p&gt;＂初雪是冬天的初恋，落雪的空气有飞鸟敛翅的温柔＂。在这满眼夏天的国度，这个冬天的初雪怕是无缘相逢了。依旧自诩为一个文字的热爱者，纵然文思不再敏捷，还是自觉不自觉拾起了这早已绣迹斑斑的笔，希望来给未来的自己留下一点回忆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Security Design and Architecture</title>
      <link>https://gaoxiang9430.github.io/post/android-security-design-and-architecture/</link>
      <pubDate>Mon, 02 Jan 2017 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/android-security-design-and-architecture/</guid>
      <description>The android architecture consists of five main layers, including Android application, Android Framework, Dalvik virtual machine, user-space native code and Linux kernel. The first two layers are developed in java, and executed in Dalvik virtual machine(DVM). DVM is a register-based VM that interprets the Dalvik Executable(DEX) byte code format. In turn, DVM relies on the functionalities provided by a number of supporting native code libraries. The user-space native code components include system services such as DBus, networking services such as dhcpd, supporting libraries such as WebKit and OpenSSL.</description>
    </item>
    
    <item>
      <title>夜的钢琴曲</title>
      <link>https://gaoxiang9430.github.io/post/life/melody-of-the-night/</link>
      <pubDate>Fri, 30 Dec 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/melody-of-the-night/</guid>
      <description>夜的钢琴曲30 - 夜音
夜的钢琴曲31 - 忆
夜的钢琴曲 - 1981
夜的钢琴曲 - 隐形的思念
夜的钢琴曲 - 一封家书
夜的钢琴曲 - 这一程，情深缘浅
夜的钢琴曲 - 白羊座的忧伤
夜的钢琴曲 - 一个人的时光
夜的钢琴曲 - 恍若如梦
夜的钢琴曲 - 街道的寂寞
夜的钢琴曲 - 雨葵
夜的钢琴曲 - 可惜不是双鱼座
夜的钢琴曲 - 幸福时光
夜的钢琴曲 - 花的微笑
夜的钢琴曲 - 下雨时你会想起谁
夜的钢琴曲 - 惜别</description>
    </item>
    
    <item>
      <title>Precise Interprocedural DataFlow Analysis Via Graph Reachability</title>
      <link>https://gaoxiang9430.github.io/post/precise-interprocedural-dataflow-analysis-via-graph-reachabilit/</link>
      <pubDate>Sat, 24 Dec 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/precise-interprocedural-dataflow-analysis-via-graph-reachabilit/</guid>
      <description>Data flow analysis can be used to find the data dependency between different functions, statements and variables. For current programming language, data flow analysis is a very complex problem. In the 1990s, there are some reseaches proposed some good ideas to deal with this problem. Thomas[1] etc proposed to transform dataflow-analysis into a graph-reachability problem. In this paper, they defined a IFDS problem(interprocedural, finite, distributive, subset).
 Super Graph In the IFDS problem, the program is represented using a directed graph called super graph.</description>
    </item>
    
    <item>
      <title>雪的印记</title>
      <link>https://gaoxiang9430.github.io/post/life/%E9%9B%AA%E7%9A%84%E5%8D%B0%E8%AE%B0/</link>
      <pubDate>Sat, 24 Dec 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E9%9B%AA%E7%9A%84%E5%8D%B0%E8%AE%B0/</guid>
      <description>&lt;p&gt;初学是冬天的初恋，落雪的空气有飞鸟敛翅的温柔。而今年的初雪你在哪里呢？&lt;/p&gt;
&lt;p&gt;我依旧是一个喜欢怀旧的人，无聊的时候总喜欢去回顾之前的说说，去翻翻曾经的老照片。然后就不自觉陷入到了那些所谓的曾经里。Page的说说依旧，今天也提醒了我又到“大雪”了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android Fuzzing</title>
      <link>https://gaoxiang9430.github.io/post/fuzzing/</link>
      <pubDate>Thu, 22 Dec 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/fuzzing/</guid>
      <description>Fuzz tesing is a method for testing software input validation by feeding it intentionally malformed input. Due to its simpleness and automated nature, fuzz attracted many researches to develop a fuzzer. Meanwhile,fuzz testing is not without drawbacks, the performance is the biggest problem. In order to fuzz a target application, the follow 4 steps should be accomplished:
1. Identifing the target2. Generating input3. Test-case delivery4. Crash monitoring  Identifying Target Identifying a target is the first step to craft an effective fuzzer.</description>
    </item>
    
    <item>
      <title>Semantics-Aware Android Malware Classification USing Weighted Contextual API Dependency Graph</title>
      <link>https://gaoxiang9430.github.io/post/semantics-aware-android-malware-classification-using-weighted-contextual-api-dependency-graphs/</link>
      <pubDate>Wed, 16 Nov 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/semantics-aware-android-malware-classification-using-weighted-contextual-api-dependency-graphs/</guid>
      <description>Existing automated Android malware detection and classification can be divided into two general catageries: signature-based and machine learning-based. The former one can be easily evaded by bytecode-level transformation attacks. And prior learning-based works extract features from application syntax instead of program semantics, which are also subject to evasion. So this paper proposed a method to extract a weighted contextual API dependency graph similarity metrics to uncover homogeneous application behaviors.</description>
    </item>
    
    <item>
      <title>一生这么久，总得相信点什么</title>
      <link>https://gaoxiang9430.github.io/post/life/%E4%B8%80%E7%94%9F%E8%BF%99%E4%B9%88%E4%B9%85%E6%80%BB%E5%BE%97%E7%9B%B8%E4%BF%A1%E7%82%B9%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 28 Oct 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E4%B8%80%E7%94%9F%E8%BF%99%E4%B9%88%E4%B9%85%E6%80%BB%E5%BE%97%E7%9B%B8%E4%BF%A1%E7%82%B9%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;&lt;strong&gt;《有个叫欧维的男人决定去死》&lt;/strong&gt;
这是除了《完美世界》，能让自己落泪的第二部电影。
片中欧维是一个追求完美，倔强且又善良的老头。他有一个善良又勇敢的妻子。他的妻子在怀孕的时候经历车祸，失去了他们的孩子并且从此只能在轮椅上度日。每天早晨8点之前，欧维都会到社区中巡视，确保社区中车辆都停在停车位上，呵责开进社区的车，拣起地上的烟头。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Taint-Enhanced Policy Enforcement</title>
      <link>https://gaoxiang9430.github.io/post/taint-enhanced-policy-enforcement/</link>
      <pubDate>Wed, 12 Oct 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/taint-enhanced-policy-enforcement/</guid>
      <description>Taint analysis is a very popular method for program static analysis. In taint analysis, we can mark some variables or memory region as taint, track the propagation of those datas, and find the path from source to sink. And then we can detect some malicious behaviors according to this analysis information. This paper proposed a taint-enhanced policy to detect many kinds of attacks in runtime. There is a kinds of vulnerabilities that can be trigged by well-designed input from attackers.</description>
    </item>
    
    <item>
      <title>Control Flow Integrity(First formal English Presentation)</title>
      <link>https://gaoxiang9430.github.io/post/cfi/</link>
      <pubDate>Thu, 06 Oct 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/cfi/</guid>
      <description>Most external attacks aim to control software behaviors. To achieve this, those attacks want to change the software control-flow graph. For example, the buffer overflow attack, attackers can change the return address after a function call completed. And even control the software to excute the system library functions. To deal with the problem, many previous works had proposed good ideas. Such as stack canaries, this mechainism add a canary before the return address, if an attack try to change the address, it mush change the canary first.</description>
    </item>
    
    <item>
      <title>单论信仰的力量</title>
      <link>https://gaoxiang9430.github.io/post/life/%E5%8D%95%E8%AE%BA%E4%BF%A1%E4%BB%B0%E7%9A%84%E5%8A%9B%E9%87%8F/</link>
      <pubDate>Mon, 03 Oct 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E5%8D%95%E8%AE%BA%E4%BF%A1%E4%BB%B0%E7%9A%84%E5%8A%9B%E9%87%8F/</guid>
      <description>&lt;p&gt;来新加坡已有两个多月了，虽然英语交流上依旧有很多的障碍，但因为种种原因接触过形形色色的人之后，我觉得现在应该有点资本和权利评论一下我眼中的各个国家的人之间思维和道德上的差别。其中免不了以偏盖全之嫌，妄论之处还待未来慢慢纠正。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppIntent: Analyzing sensitive data transmission in Android for privacy leakage detection</title>
      <link>https://gaoxiang9430.github.io/post/appintent_privacy-leakage-detection/</link>
      <pubDate>Thu, 29 Sep 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/appintent_privacy-leakage-detection/</guid>
      <description>Android phones carry much personal information, attracting malicious developers to embed code in Android applications to steal sensitive data. Transmission of sensitive data in itself does not indicate privacy leakage, a better indicator may be whether the transmission is by user intention or not. When transmission is not user-intended, it is more likely a privacy leakage. AppIntent first apply static analysis to the target app to identify the possible execution under analysis.</description>
    </item>
    
    <item>
      <title>程序分析中的 {path,context,flow}-sensitive 问题</title>
      <link>https://gaoxiang9430.github.io/post/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84-pathcontextflow-sensitive-%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 28 Sep 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84-pathcontextflow-sensitive-%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;题主想要不同语言的定义，我只熟悉OO语言，所以我只解释OO程序里的概念。不过知道OO语言的之后，C的也基本能触类旁通，因为它们都是imperative语言。Functional语言的context-sensitivity我猜应该也是相通的，至于functional语言的flow-和path-sensitivity我就不知道是怎么回事了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AppContext: Differentiating Malicious and Benign Mobile App Behaviors Using Context</title>
      <link>https://gaoxiang9430.github.io/post/icse15_appcontext/</link>
      <pubDate>Sat, 24 Sep 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/icse15_appcontext/</guid>
      <description>Mobile malware attempts to evade detection during app analysis by mimicking security-sensitive behaviors of benigh apps that provide similar functionality, making it much more difficult to detect. This paper propose that the malicious and benign behaviors within apps can be differentialted based on the context that trigger security sensitive behaviors, ie., the event and conditions that cause the security-sensitive behaviors to occur. And they introduced AppContext, an approch of static program analysis that extracts the contexts of security-sensitive behaviors to assist app analysis.</description>
    </item>
    
    <item>
      <title>快乐，是有治愈心灵的作用的</title>
      <link>https://gaoxiang9430.github.io/post/life/%E5%BF%AB%E4%B9%90%E6%98%AF%E6%9C%89%E6%B2%BB%E6%84%88%E5%BF%83%E7%81%B5%E7%9A%84%E4%BD%9C%E7%94%A8%E7%9A%84/</link>
      <pubDate>Sun, 18 Sep 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E5%BF%AB%E4%B9%90%E6%98%AF%E6%9C%89%E6%B2%BB%E6%84%88%E5%BF%83%E7%81%B5%E7%9A%84%E4%BD%9C%E7%94%A8%E7%9A%84/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;看完这部电影就给一个好朋友说“《海蒂和爷爷》，我被一个小女孩改变了世界观”。说到世界观，其实有些虚无飘渺的味道的。这种改变是这个精灵般的小女孩让我相信原来世界还有这么多的美好可以去追求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>致青春，做一个和自己赛跑的人</title>
      <link>https://gaoxiang9430.github.io/post/life/%E8%87%B4%E9%9D%92%E6%98%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%92%8C%E8%87%AA%E5%B7%B1%E8%B5%9B%E8%B7%91%E7%9A%84%E4%BA%BA/</link>
      <pubDate>Mon, 12 Sep 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/%E8%87%B4%E9%9D%92%E6%98%A5%E5%81%9A%E4%B8%80%E4%B8%AA%E5%92%8C%E8%87%AA%E5%B7%B1%E8%B5%9B%E8%B7%91%E7%9A%84%E4%BA%BA/</guid>
      <description>&lt;p&gt;本来以为自己已经过了读心灵鸡汤的年龄，经历过很多事情之后，对于很多的励志故事越来越无感起来。而白岩松这个大学开学典礼的演讲竟然又深深触动了心灵。于是突然又觉得我还年轻，我面前还有Phd的生活等待我去探索。而我完全可以把我的博士经历过成有一个大学，一个更精彩的大学。在这篇洋洋洒洒的文字里，最感动我的有两点，一是专注当前，而是发扬个性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Coverage-based Fuzzing as Markov Chain</title>
      <link>https://gaoxiang9430.github.io/post/converage-based-greybox-fuzzing/</link>
      <pubDate>Mon, 08 Aug 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/converage-based-greybox-fuzzing/</guid>
      <description>This paper introduced Markov Chain into greybox Fuzzing to explore the state space of programs more systematically. The chain specifies the probability that fuzzing an input that exercises path i generates an input that exercise path j. Then, they assign each fuzzed test input an energy that controls the amount of fuzz generated at each iteration. And they find that greybox fuzzing is most efficient if the exploration focuses on the low-density region.</description>
    </item>
    
    <item>
      <title>Detecting Energy Bugs and Hotspots in Mobile Apps</title>
      <link>https://gaoxiang9430.github.io/post/detecting-energy-bugs-and-hotspot/</link>
      <pubDate>Sun, 07 Aug 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/detecting-energy-bugs-and-hotspot/</guid>
      <description>Over the recent years, the popularity of smartphones has increased dramatically. As we all know, smartphone is an energy-limited device. So, it is important to develop tools and techniques that aid in energy-efficient application development. Energy inefficiencies in smartphone can broadly be categorized into energy hotspots and energy bugs. An energy hotspot can be described as a scenario where executing an application causes the smartphone to consume abnormally high amount of battery power.</description>
    </item>
    
    <item>
      <title>别了，我的大学……</title>
      <link>https://gaoxiang9430.github.io/post/life/bye_my_university/</link>
      <pubDate>Wed, 29 Jun 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/bye_my_university/</guid>
      <description>“我像国王一样到来，像传奇一样离开”，这是伊布拉希莫维奇离开巴黎圣日耳曼时的霸气留言。既不是国王，亦未能成就传奇，在这大学的弥留之际，要选个词来总结的话，我想会说“很棒，很漂亮”。 时光如絮，轻巧晕染季节轮廓；手中书卷，翻转一轮淡淡哀伤。恍惚间，四年的大学时光竟然已经到了分别的时候。在熟悉的教室里，看着学弟学妹忙碌的身影，回顾大学四年的点点滴滴，不自觉的有了些许悲伤的味道。离别总是充满悲情的，而正是有了这些悲情才让相遇显得弥足珍惜。四年前与大学初次邂逅的情景依旧历历在目，四年，有经历，有成长，有遗憾，亦有收获。四年，满满的记忆也需要整理一下了，希望多年后再次读起这些文字的时候能发现青春时的迷茫与懵懂，以及那份最美好年华的激情。
回顾我的大学，大一最迷茫，大二最努力，大三最精彩，大四最幸运……
查到被录取的专业时我正在辅导班的课堂上。对于“软件工程”我是既不爱也不能言恨的。选择专业的盲目让我在那个下午显得足够的坚强。注定我是幸运的，如今看来让我再走一遍的话，我依旧希望是同样的路。而对于大一的自己，其实是迷茫的。面试“时空&amp;quot;被拒，到头来都不知道死在了哪里。演讲比赛被刷，原来同学的表现是如此的优雅。ACM新生赛，各种被踩，当时都开始怀疑人生了。学生会的失意，转专业的冲动，学习的压力在那段阴暗的时期不断袭来。明确目标是在我加入嵌入式实验室后，菁英班的通过更让我坚定了信念。班级第一，一等奖学金，那些曾带给我的感动与喜悦伴随着青春的迷茫，至今难忘。
大二，想起的第一个词就是“忙”，课程压力大，除了正常的课程安排之外还要补计算机大一的课，比赛任务重，参加过齐鲁软件设计，微软创新杯，每一个比赛都是一场鏖战。那段时期起的还很早，睡的也很晚。当周围有同学开始抱怨自己选择菁英班决定的时候，我却从来没有怀疑过。渐渐喜欢上与舍友一起上自习的感觉，喜欢上page每晚的讲课。成绩虽然不再是第一，总归也还说的过去，比赛虽然没有进入全国总决赛，全省第一名也已经心满意足了。那段时光，真的累并快乐着。
大三，课程压力丝毫不减。每天被课程和实验排满。不过对于大三的印象除了忙之外最大的感受就是足够精彩。暑期的中科院计算所之行，第一次见到了天安门，第一次半夜爬起来看世界杯，第一次接触了图灵机和查分机。英特尔杯决赛之旅，体味了一把纯正的湘江风情。阿里、百度的实习生面试，突然发现自己的专业水平也还可以。华为南研的参观，第一次踏上心驰神往的土地。虽然有学习的压力，也有面试港大的失落，这都难掩生活的愉悦与探索的欣喜。那段时光，足够精彩……
大四，终于没有了课程的压力，而我也最终决定继续读书。中科院暑期夏令营就幸运拿到了offer，就在准备下决心去中科院读研的时候，之前申请的清华有了些新的进展。后来又得到一个去新加坡国立大学的机会，顺利通过面试后，9月7号，那个我一生都不会忘记的日子，收到了NUS的offer，一切尘埃落定。关于出国，不得不承认大学的前三年从未真正的考虑过，关于实习，从未想到能走进阿里。所以一直觉得我是幸运的。NUS，希望你的阳光和山大一样绚烂，而阿里，你的那抹橙色将永远在我心里鲜艳。
青春不死，只是凋零。别过夏的炎，冬的雪，春的暖，别过这一季，大学的最后时光，只愿这段时光能慢些，再慢一些……有个同学曾说“对山大，对菁英班并非一见钟情，却会用一生去怀念”。“我的山大我的家”，此生难忘……
季羡林朴实的文字总能让我完成从小我到大我的转变，余秋雨华丽的文笔总能激发自己对中华民族文化的思考。所以，读书不仅仅是为了快乐，读书也能诱发思维的转变。于此，感谢那些曾经给过我鼓励的人儿……
关于未来，我希望自己成为一个心地干净、思路清晰且没有多少情绪和妄念的人，我希望永远对生活保持着爱与执着，也希望我的心永远是自由的。人生很短，能完成生而为人的那一点点的使命，能在人类的发展史上留下哪怕非常轻微的一点点的痕迹，能给更多的人带来便利，给我爱的人的带来快乐，就是我最大的奢求和期盼了。自然我也一直坚信学场有别与官场，风骨远胜于媚骨。
这几年我是如此的幸运，走过那些大的舞台，也庆幸自己选择继续读书，重新燃起去世界看看的梦想。于我而言，当前工作确实是不合适的。五星红旗在我心，离开是为了更好的回来。希望我回来的时候不仅带着知识的提升亦完成了性格的进阶。自然我也一定会守护好我的激情，在这个时代里坚守住我的信仰。一段旅程的结束，一段苦旅的开始，祝未来安好，也祝自己继续幸运。
别了，我的大学……</description>
    </item>
    
    <item>
      <title>X86汇编语言学习</title>
      <link>https://gaoxiang9430.github.io/post/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 26 May 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;X86是intel芯片的指令集，本文中描述了部分常用的x86指令．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>纪念人生的第一次马拉松</title>
      <link>https://gaoxiang9430.github.io/post/life/marathon/</link>
      <pubDate>Thu, 12 May 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/life/marathon/</guid>
      <description>决定参加马拉松是从看到的一句话开始的“既然青春留不住，折腾一步算一步”。从12月份就报名了泰山半马，不过由于天气冷还有济南空气的原因直到2月26才算正式开始准备。在开始准备之前还得感谢黄某人给推荐的跑步软件“咕咚”，第一次知道了什么是配速，第一次开始制定一个月后的目标。
在一个月的训练过程中，总体上感觉还是不错的，基本上按照每个周最长距离提升两公里的节奏进行。第一次跑的时候是最痛苦的，一直自我感觉身体素质还不错，上来就跑了4公里，结果就是腿疼了至少3天。后来的日子里，逐步找到了适合自己的呼吸方式（3步一呼3步一吸）和跑步姿势，在逐渐增加训练量的过程中也没有感到太大的压力。这期间非常感激小楷楷的陪伴，没有他的陪同，不知道自己能不能坚持的下来，虽然对他最后反悔不去泰安很是气愤。
在正式跑之前的一个星期跑过一个18公里，当时跑了1:39分钟，顿时对于2小时的目标感到信心满满，跑完之后也没有太大的感觉，第二天就完全恢复了。不过在听说了各种猝死的新闻之后心里还是有很多的担忧的。
因为小楷楷的反悔，无奈自己跑去泰安。我是前一天去的，下午还去逛了逛岱庙。看着岱庙30块钱的门票本来要转身离开的，但是握着有效期已经不足3个月的学生证毅然决然的花了15块钱。不过这15块钱着实是非常值得的。蹭了一路的导游，看了看2000多年的石刻、了解了李斯碑、、抓了抓福窝、还偷偷的抓了一把放在兜里。重要的是看了看远古的柏树、还有“活化石”之称的千年银杏树。此外还有两个重要发现，一是乾隆、康熙的卧室原来是如此的简陋，第二是泰安的大妈们很爱跳爱唱。岱庙之行除了不愧对我的15块钱之外，也让我觉得比待在宾馆玩手机充实多了。
言归正传，对于泰马组委会的态度我真是醉了，领物要求带报名表、体检表和身份证复印件，结果不知道是哪个大学的志愿者同志们竟然只要了我的报名表，组委会不负责的态度很是令我失望。自然这都是一些细节。
本打算晚上早早睡觉，可是睡前紧张到不行，怕我爸妈担心也没告诉他们。想了各种猝死的后果，然后就爬起来给page和xkk发信息要他们11点给我打电话以防我就此永别，把紧急情况联系人又确认了一遍，给大黄留了个言然后就开始属羊了。睡的还好，5点多就醒了，直到6点才起床。没想到吃过早饭去赶公交的时候就遇到了一个来自秦皇岛和一个来自帝都的战友，探寻半马能跑多长时间，1:40，瞬间感觉遇到了高手。早晨的泰安大街还不算拥堵，7点多一点就到目的地了。热身的过程中遇到了东平大叔，他的目标是1:50分钟，本想跟着他跑来着，不过后来就找不到了。我们相互拍多很多照片，也互留了微信，也算是交的一个好友了。其中还有一个小插曲，我的衣服穿反了（尴尬），非常感谢热心大叔的提醒，令我感到宽慰的是跑的过程中遇到一个和我一样穿反的，为了不影响他的成绩我也没提醒他。
看了泰安大叔激情澎湃的主持和保定大妈的节目表演，跟无人机打了各种招呼，跟着大伙倒数10个数后自虐之旅就此开始了。开头的部分是很轻松的，开始不久就找到了2:00兔子，本想找1:50的，可是没有找到。各种起伏的路我也是醉了，跟着兔子跑也没感觉到累，有几次想超过他们，害怕后程跑不动也就放弃了。快到5公里的时候有个大坡，听有个兔子讲这是最后一个坡了，没想到这只是谎言的开始。爬坡的时候开始有人掉队了，不过奇怪的是没有见到多少10公里参赛者折返回程的，可能10公里参加的人不多吧。5公里的时候稍稍感到有点口渴，就补了一次水，补水的时候竟然奇迹般的发现只有矿泉手没有运动饮料，这也太抠门了吧。
跑的过程中看到有好多了都拿着手机拍照，为了尽可能的减少负担，没有带手机的我现在有点后悔了。5-10公里的时候稍稍有点累，不过有兔子控制速度，所以感觉还好。到8.5左右的时候就看到有人返程了，第二名竟然是个女的，瞬间有种被虐的感觉，我们周围所有的人都没有吝啬自己的掌声。感觉很快就到折返点了，也宣布自虐之旅已经进行了一半了。这时候想的是现在走下来也能3小时完赛，当然还是要跑的。这时候2:00兔子说前半程速度快了，要压一压，我感觉还可以就没降速一直跑下去了。不知道前面的人速度慢了还是我快了，一路上一直在超越，成就感满满的。不过到12公里的时候回头看2:00兔子们就在后边100米左右的地方，他们这群骗子。不管他们，跟着一个披着“河北航天”旗子的哥们继续，中途还遇到两个赤脚大仙想超过我，这怎么能忍，必须匀速追回来。快到最后5公里一直在想补水点怎么还不到啊，怎么还不到，来的时候一直是上坡，怎么感觉回程还是一直上坡呢……直到16公里的补水点，大大的下坡，那膝盖的酸霜现在想起来还隐隐做痛。最后5公里是最难熬的，每次遇到补水点就把腿浇湿，兔子教的方法还是不错，能管半公里的用，只是我忘了来泰安只带了一双袜子……
到18公里的时候问了问旁边的哥们时间1:40，感觉速度还可以，2小时妥妥的。最后3公里，每一步都是困难的，18.5的补水点后开始尝试一点点的加速，因为有好多人要超过我，这当然是不能忍的，结果就是超过了好多人。“上了这个坡就到了”还是这么天真的以为真的到了，然后咬牙加速，然而还是那句“上了这个坡就到了”……度过立交桥后终于看到转弯点了，这时候本有体力全力冲一下的，但是想到终点线猝死的新闻就放弃了，被两个人超越令我很是不爽。1:58，张开双臂，冲过终点只是没人迎接，也没人拍照……组委会，你们还能再坑点吗？
虽然一直在对组委会吐槽，第一次半马的经历还是让我灰常灰常开心的，如page所言我可以吹一辈的成就。黄黄的电话也是另刚刚自虐完的我很是感动，带着的奖牌也令我非常的兴奋，毕竟人生第一次奖牌嘛。
然后发了个说说“青春既然留不住，折腾一步算一步”，也算是给我的首个半马画个句号。又再次遇到了秦皇岛兄弟，1:31的成绩简直不敢设想，说不定哪天工作了，有时间好好练练也没问题。微信和东平大叔聊天，1:56比我快了2分钟，比人家小了20多岁，也是惭愧。 重在参与嘛，无论是自虐的过程，还是兔子的闲扯，还是秦皇岛兄弟和东平大叔的情谊都是快乐满满的，此次半马之旅，最起码不亏…… 我的奖牌 </description>
    </item>
    
    <item>
      <title>Git学习记录</title>
      <link>https://gaoxiang9430.github.io/post/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 11 May 2016 21:45:10 +0800</pubDate>
      
      <guid>https://gaoxiang9430.github.io/post/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>Git是目前世界上最先进的分布式版本控制系统（没有之一）。在linux系统发展之初，世界各地的志愿者把代码通过diff的方式发给linus，然后由linus通过手工的方式进行整合，这种方式效率低，且易发生错误。当时世界上有些免费的版本控制系统（CSV，SVN），但是这些系统是集中式的，且必须联网才能使用。后来linus花了两周时间用c写了一个分布式的版本管理系统，这就是Git。 Git与其他分布式系统的区别主要是他为分布式的。在传统的集中式版本控制系统中，版本库存放于中央服务器，在修改代码的时候首先从服务器下载最新版本。干完活之后在推送给服务器，因此这个过程需要联网的支持。可是当网络不好的时候，就会导致工作效率很差。在分布式的版本系统中，没有所谓的中央服务器，每个人的电脑上有个完整的版本库，这样就可以在不联网的状态下工作了。在多人协作的时候，每个人将自己修改的代码推送给所有的团队成员。当然为了管理的方便，也可以设置一个服务器，用于方便团队成员交换意见。在分布式管理的模式下也可以避免服务器的崩溃而导致所有文件的丢失，增加了系统的健壮性。
 git的安装 可以通过sudo apt-get install git直接安装，也可以下载源码，然后./config, make, sudo make install来执行安装。安装完成后通过
$ git config --global user.name &amp;quot;Your Name&amp;quot; $ git config --global user.email &amp;quot;email@example.com&amp;quot; 来对其进行设置。这表示这台机器上的所有仓库都会使用这个设置。
 创建版本库 创建一个目录，然后git init就会在该目录下创建一个.git文件，用来跟踪和管理版本库。在创建版本库之后就可以向该版本库中添加文件了， git add (file or directory) #将新文件添加到stage（暂存区）中 git commit -m &amp;quot;here is commit information&amp;quot; #将stage中的文件提交到版本库。 git status 查看当前版本库的状态，是否有修改后未提交的文件 git log 查看提交历史 git reset --hard (commit id) 回退到之前的版本 git rm test.txt ; git commit -m &amp;quot;rm file&amp;quot;从git版本库中删除文件
 git远程仓库 我们可以首先在github上注册一个帐号，由github来充当项目服务器的角色，不过github上的代码都是公开的。为了防止他人想你的github胡乱提交，你首先需要在github中加入你自己的ssh公钥。公钥的生成方式： ssh-keygen -t rsa -C &amp;ldquo;youremail@example.</description>
    </item>
    
  </channel>
</rss>